<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
">



    <context:property-placeholder location="classpath:db.properties" />
    <!-- enable @Transactional Annotation -->    
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- @PersistenceUnit annotation -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
    
    <!-- data source with c3p0 -->
    <bean id="dataSource" class = "com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
          p:driverClass="${jdbc.driverClassName}"
          p:jdbcUrl="${jdbc.url}"
          p:user="${jdbc.username}"
          p:password="${jdbc.password}"
          p:acquireIncrement="${c3p0.acquire_increment}"
          p:minPoolSize="${c3p0.min_size}"
          p:maxPoolSize="${c3p0.max_size}" />
 	

    <!-- Hibernate as JPA vendor-->
    <bean id="jpaAdapter" 
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
          p:database="${jpa.database}" p:showSql="${jpa.showSql}" />

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource" p:persistenceXmlLocation="classpath:META-INF/persistence_test.xml"
          p:jpaVendorAdapter-ref="jpaAdapter">

        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
                <!--useful for debugging-->
                <prop key="hibernate.generate_statistics">true</prop>
            </props>
        </property>
        <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
        </property>
        <property name="persistenceUnitName" value="com_persistenceunit"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory" />
    
    <!--SERVICES-->
    <bean id="userService" class="com.rideon.model.service.impl.UserServiceImpl"/>
    <bean id="friendshiRequestServiceService" class="com.rideon.model.service.impl.FriendshipRequestServiceImpl"/>
    <bean id="groupService" class="com.rideon.model.service.impl.GroupServiceImpl"/>
    <bean id="practiceService" class="com.rideon.model.service.impl.PracticeServiceImpl"/>
    <bean id="routeService" class="com.rideon.model.service.impl.RouteServiceImpl"/>
    <bean id="segmentService" class="com.rideon.model.service.impl.SegmentServiceImpl"/>
    <bean id="eventService" class="com.rideon.model.service.impl.EventServiceImpl"/>
    
    <!--DAO-->
    <bean id="userDao" class="com.rideon.model.dao.impl.UserDaoImpl"/>
    <bean id="groupDao" class="com.rideon.model.dao.impl.GroupDaoImpl"/>
    <bean id="messageDao" class="com.rideon.model.dao.impl.MessageDaoImpl"/>
    <bean id="friendshipRequestDao" class="com.rideon.model.dao.impl.FriendshipRequestDaoImpl"/>
    <bean id="routeDao" class="com.rideon.model.dao.impl.RouteDaoImpl"/>
    <bean id="segmentDao" class="com.rideon.model.dao.impl.SegmentDaoImpl"/>
    <bean id="practiceDao" class="com.rideon.model.dao.impl.PracticeDaoImpl"/>
    <bean id="segmentPracticeDao" class="com.rideon.model.dao.impl.SegmentPracticeDaoImpl"/>
    <bean id="eventDao" class="com.rideon.model.dao.impl.EventDaoImpl"/>
    <bean id="multimediaDao" class="com.rideon.model.dao.impl.MultimediaDaoImpl"/>
    <bean id="mapper" class="com.rideon.mapper.MapperFacadeFactoryBean">
        <property name="configurers">
            <list>
                <bean id="userMappingConfigurer" class="com.rideon.mapper.impl.UserMappingConfigurer"/>
                <bean id="groupMappingConfigurer" class="com.rideon.mapper.impl.GroupMappingConfigurer"/>
                <bean id="eventMappingConfigurer" class="com.rideon.mapper.impl.EventMappingConfigurer"/>
                <bean id="bicycleMappingConfigurer" class="com.rideon.mapper.impl.BicycleMappingConfigurer"/>
                <bean id="baseListMappingConfigurer" class="com.rideon.mapper.impl.BaseListMappingConfigurer"/>
                <bean id="friendshipRequestMappingConfigurer" class="com.rideon.mapper.impl.FriendshipRequestMappingConfigurer"/>
                <bean id="messageMappingConfigurer" class="com.rideon.mapper.impl.MessageMappingConfigurer"/>
                <bean id="multimediaMappingConfigurer" class="com.rideon.mapper.impl.MultimediaMappingConfigurer"/>
                <bean id="practiceMappingConfigurer" class="com.rideon.mapper.impl.PracticeMappingConfigurer"/>
                <bean id="routeMappingConfigurer" class="com.rideon.mapper.impl.RouteMappingConfigurer"/>
                <bean id="segmentMappingConfigurer" class="com.rideon.mapper.impl.SegmentMappingConfigurer"/>
                <bean id="segmentPracticeMappingConfigurer" class="com.rideon.mapper.impl.SegmentPracticeMappingConfigurer"/>
                <bean id="lineStringMappingConfigurer" class="com.rideon.mapper.impl.LineStringMappingConfigurer"/>
                <bean id="geometryMappingConfigurer" class="com.rideon.mapper.impl.GeometryMappingConfigurer"/>
            </list>
        </property>
    </bean>
</beans>
